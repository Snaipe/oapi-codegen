

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterOptions contains options that alter how routes get registered.
type RegisterOptions struct {
	// BaseURL is prepended to the registered paths, so that the paths
	// can be served under a prefix.
	BaseURL string

	// Middlewares is a slice of middleware functions that get applied
	// in sequence after the parameters get decoded and additional context
	// (for instance, scopes) gets set by the ServerInterfaceWrapper.
	Middlewares []echo.MiddlewareFunc
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
    RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	RegisterHandlersWithOptions(router, si, RegisterOptions{BaseURL: baseURL})
}

// Registers handlers using options.
func RegisterHandlersWithOptions(router EchoRouter, si ServerInterface, opts RegisterOptions) {
{{if .}}
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}
{{end}}
{{range .}}router.{{.Method}}(opts.BaseURL + "{{.Path | swaggerUriToEchoUri}}", wrapper.{{.OperationId}}, opts.Middlewares...)
{{end}}
}
